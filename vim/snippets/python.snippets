snippet #!
	#!/usr/bin/python

snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}



#GKS Additions
snippet polyfit
	coeff = polyfit( ${1:x}, ${2:y}, ${3:1})
	p = poly1d( coeff)
	${4:pass}

snippet optimize
	#Optimization	
	def func(p,x):
		"""Fit line"""
		return p[0]*x+p[1]

	def errfunc(p,x,y,err):
		"""errorfunction to be optimized"""
		return (y-func(p,x))/err

	pinit = [1.0, 1.0]
	p_opt = optimize.leastsq(errfunc,pinit,args=(<+x+>,<+y+>,<+dy+>),full_output=1) 
	print "Fit", p_opt[0]
	#The following works for a line
	pErr = []
	pErr.append(sqrt(p_opt[1][0][0]))
	pErr.append(sqrt(p_opt[1][1][1]))
	print "Errors:", pErr
	#Save parametrs to a file
	f = open(name+".log","w")
	commentString = "# a:error	b:error\n"
	f.write(commentString)
	f.write(str(p_opt[0][0]) +"\t" + str(pErr[0]) + "\n")
	f.write(str(p_opt[0][1]) +"\t" + str(pErr[1]) + "\n")
	f.close()

	#FOR PLOTTING FIT
	xFit = linspace(<+x+>.min(),<+x+>.max(),100) 
	yFit = func(p_opt[0],xFit) 
	ax.plot(xFit,yFit,color="black",linewidth=1,linestyle="-",label="Fit")


snippet data
	data = loadtxt(${1:file.txt},comments="#",usecols=(${2:0}))

snippet scip
	import numpy as np
	from pylab import *
	from scipy import *
	import scipy.constants as const
	${1:pass}

snippet plot
	plot(${1:X},${2:Y},color="${3:blue}",linewidth=${4:1},linestyle="${5:-,--}",label="${6:}")
	${7:}

snippet errorbar
	errorbar(${1:X},${2:Y},xerr=${3:xErr},yerr=${4:yErr},marker="${5:D}",fmt=None,elinewidth=${6:1})
	${7:}

snippet encoding
	#!/usr/bin/python
	# -*- coding: utf-8 -*-	

snippet fopen
	f = open(${1:file},"w")
	f.write(${2:string})
	f.clos()

snippet font
	font = {'family' : 'serif',
		'weight' : 'normal',
		'size'	 : 18}
	matplotlib.rc('font',**font)

snippet nbins
	plt.locator_params(axis="${1:x}",nbins=${2:4})
	${3:}

snippet changeticks
	def changeTicks(axis,num):
		"""Change ticks on axes, either x or y"""
		if axis=="x":
			xTicks = ax.get_xticks()
			ax.set_xticks(arange(min(xTicks),max(xTicks),num))
		elif axis=="y":
			yTicks = ax.get_yticks()
			ax.set_yticks(arange(min(yTicks),max(yTicks),num))
		else:
			print "Either x or y!"
			
snippet twofig
	fig = plt.figure()
	ax = fig.add_subplot(111)
	fig2 = plt.figure()
	bx = fig2.add_subplot(111)
	adjustprops = dict(left=0.19,bottom=0.15,right=0.92,top=0.9,wspace=0.,hspace=0.2)
	fig.subplots_adjust(**adjustprops)	
	fig2.subplots_adjust(**adjustprops)	

	ax.set_xlabel(r'$x$',size="x-large")
	ax.set_ylabel(r'$y$',size="x-large")
	bx.set_xlabel(r'$x$',size="x-large")
	bx.set_ylabel(r'$y$',size="x-large")

	#ax.set_xlim()
	#ax.set_ylim()
	#bx.set_xlim()
	#bx.set_ylim()

	ax.minorticks_on()
	bx.minorticks_on()
	ax.grid()
	bx.grid()

	#PLOT
	ax.plot
	bx.plot

		
snippet fig11
	#One Figure
	fig = plt.figure()
	ax = fig.add_subplot(111)
	adjustprops = dict(left=0.19,bottom=0.15,right=0.92,top=0.9,wspace=0.,hspace=0.2)
	fig.subplots_adjust(**adjustprops)	

	ax.set_xlabel(r'$x$',size="x-large")
	ax.set_ylabel(r'$y$',size="x-large")

	#ax.set_xlim()
	#ax.set_ylim()

	ax.minorticks_on()
	ax.grid()

	#PLOT
	ax.plot


snippet fig21
	figprops = dict(figsize=(8.,8./2.118), dpi=256)
	adjustprops = dict(left=0.13,bottom=0.12,right=0.97,top=0.83,wspace=0.,hspace=0.2)

	#fig = plt.figure(**figprops)
	fig = plt.figure()
	fig.subplots_adjust(**adjustprops)

	bx = fig.add_subplot(2,1,2)
	ax = fig.add_subplot(2,1,1,sharex=bx)

	#ax.set_xlabel(r'$x$',size="x-large")
	ax.set_ylabel(r'$y$',size="x-large")
	bx.set_xlabel(r'$x$',size="x-large")
	bx.set_ylabel(r'$y$',size="x-large")

	#ax.set_xlim()
	#ax.set_ylim()
	#bx.set_xlim()
	#bx.set_ylim()

	ax.grid()
	bx.grid()
	ax.minorticks_on()
	bx.minorticks_on()

	plt.setp(ax.get_xticklabels(),visible=False)

	#PLOT
	ax.plot
	bx.plot


snippet fig12
	figprops = dict(figsize=(8.,8./2.118), dpi=256)
	adjustprops = dict(left=0.13,bottom=0.12,right=0.97,top=0.83,wspace=0.,hspace=0.2)

	#fig = plt.figure(**figprops)
	fig = plt.figure()
	fig.subplots_adjust(**adjustprops)

	ax = fig.add_subplot(1,2,1)
	bx = fig.add_subplot(1,2,2,sharey=ax)

	ax.set_xlabel(r'$x$',size="x-large")
	ax.set_ylabel(r'$y$',size="x-large")
	bx.set_xlabel(r'$x$',size="x-large")
	#bx.set_ylabel(r'$y$',size="x-large")

	#ax.set_xlim()
	#ax.set_ylim()
	#bx.set_xlim()
	#bx.set_ylim()

	ax.grid()
	bx.grid()
	ax.minorticks_on()
	bx.minorticks_on()

	plt.setp(bx.get_yticklabels(),visible=False)

	#PLOT
	ax.plot
	bx.plot

	
snippet fig13
	figprops = dict(figsize=(8.,8./2.118), dpi=256)
	adjustprops = dict(left=0.13,bottom=0.12,right=0.97,top=0.83,wspace=0.,hspace=0.2)

	#fig = plt.figure(**figprops)
	fig = plt.figure()
	fig.subplots_adjust(**adjustprops)

	ax = fig.add_subplot(1,3,1)
	bx = fig.add_subplot(1,3,2,sharex=ax,sharey=ax)
	cx = fig.add_subplot(1,3,3,sharex=ax,sharey=ax)

	ax.set_xlabel(r'$x$',size="x-large")
	ax.set_ylabel(r'$y$',size="x-large")
	bx.set_xlabel(r'$x$',size="x-large")
	#bx.set_ylabel(r'$y$',size="x-large")
	cx.set_xlabel(r'$x$',size="x-large")
	#cx.set_ylabel(r'$y$',size="x-large")

	#ax.set_xlim()
	#ax.set_ylim()
	#bx.set_xlim()
	#bx.set_ylim()
	#cx.set_xlim()
	#cx.set_ylim()

	ax.grid()
	bx.grid()
	cx.grid()
	ax.minorticks_on()
	bx.minorticks_on()
	cx.minorticks_on()

	plt.setp(bx.get_yticklabels(),visible=False)
	plt.setp(cx.get_yticklabels(),visible=False)

	#PLOT
	ax.plot
	bx.plot
	cx.plot

snippet legend
	legend(loc="${1:lower right}",prop={'size':${2:16}})
	${3:}

snippet plotall
	#Plot all files in the current folder
	import subprocess

	bashCommand = "ls txt/" 
	process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
	output = process.communicate()[0]
	out = output.split()

	for name in out:
		print name
		fig = plt.figure()
		ax = fig.add_subplot(111)
		data = loadtxt("txt/"+name,comments="#",usecols=(0,1))
		x	= data[:,0]
		y	= data[:,1]

		ax.set_xlabel("x")
		ax.set_ylabel("y")

		#ax.set_xlim()
		#ax.set_ylim()
		ax.set_title(name)
		ax.grid()
		ax.minorticks_on()
		ax.plot(x,y,color="blue",linewidth=1,linestyle="-",label="")

		savefig(name+".pdf")

snippet tickRotate
	#Rotateticks
	for label in ${1:ax}.get_xticklabels():
		#negative clockwise; positive counterclockwise
		label.set_rotation(${2:-20})
	${3:}
	
snippet intTick
	#int-ify ticks
	myTicks = [int(x) for x in linspace(min(${1:x}),max(${2:x}),${3:})]
	${4:ax}.set_${5:x}ticks(myTicks)

